{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","messageValue","setMessageValue","allWaves","setAllWaves","console","log","getAllWaves","a","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","contractABI","waves","wavesCleaned","forEach","wave","push","address","waver","timestamp","Date","message","abi","checkIfWalletIsConnected","request","method","accounts","length","account","connectWallet","alert","getTotalWaves","count","toNumber","gasLimit","waveTxn","hash","wait","useEffect","className","role","aria-label","name","placeholder","type","id","value","onChange","e","target","onClick","slice","reverse","map","index","key","style","backgroundColor","marginTop","padding","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.45af8761.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n/* ethers 変数を使えるようにする*/\nimport { ethers } from \"ethers\";\n/* ABIファイルを含むWavePortal.jsonファイルをインポートする*/\nimport abi from \"./utils/WavePortal.json\";\n\nconst App = () => {\n  /* ユーザーのパブリックウォレットを保存するために使用する状態変数を定義 */\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  /* ユーザーのメッセージを保存するために使用する状態変数を定義 */\n  const [messageValue, setMessageValue] = useState(\"\")\n  /* すべてのwavesを保存する状態変数を定義 */\n  const [allWaves, setAllWaves] = useState([]);\n  console.log(\"currentAccount: \", currentAccount);\n  /* デプロイされたコントラクトのアドレスを保持する変数を作成 */\n  const contractAddress = \"0x8B1D31bFBf34dBF12c73034215752261e55b443c\";\n  /* コントラクトからすべてのwavesを取得するメソッドを作成 */\n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        /* コントラクトからgetAllWavesメソッドを呼び出す */\n        const waves = await wavePortalContract.getAllWaves();\n        /* UIに必要なのは、アドレス、タイムスタンプ、メッセージだけなので、以下のように設定 */\n        let wavesCleaned = [];\n        waves.forEach(wave => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message\n          });\n        });\n        /* React Stateにデータを格納する */\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  /* ABIの内容を参照する変数を作成 */\n  const contractABI = abi.abi;\n  /* window.ethereumにアクセスできることを確認 */\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n      /* ユーザーのウォレットへのアクセスが許可されているかどうかを確認 */\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account)\n        getAllWaves();\n      } else {\n        console.log(\"No authorized account found\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  /* connectWalletメソッドを実装 */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n      console.log(\"Connected: \", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  /* waveの回数をカウントする関数を実装 */\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        /* ABIを参照 */\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        /* コントラクトに👋（wave）を書き込む */\n        const waveTxn = await wavePortalContract.wave(messageValue,{gasLimit:300000})\n        console.log(\"Mining...\", waveTxn.hash);\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  /* WEBページがロードされたときに下記の関数を実行 */\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n        <span role=\"img\" aria-label=\"hand-wave\">👋</span> ようこそ！\n        </div>\n        <div className=\"bio\">\n          イーサリアムウォレットを接続して、メッセージを作成したら、<span role=\"img\" aria-label=\"hand-wave\">👋</span>を送ってください<span role=\"img\" aria-label=\"shine\">✨</span>\n        </div>\n        <br></br>\n        {/* メッセージボックスを実装*/}\n        {currentAccount && (<textarea name=\"messageArea\"\n            placeholder=\"メッセージはこちら\"\n            type=\"text\"\n            id=\"message\"\n            value={messageValue}\n            onChange={e => setMessageValue(e.target.value)} />)\n        }\n        {/* waveボタンにwave関数を連動 */}\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me\n        </button>\n        {/* ウォレットコネクトのボタンを実装 */}\n        {!currentAccount && (\n        <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n        </button>\n        )}\n        {currentAccount && (\n        <button className=\"waveButton\" onClick={connectWallet}>\n            Wallet Connected\n        </button>\n        )}\n        {/* 履歴を表示する */}\n        {allWaves.slice(0).reverse().map((wave, index) => {\n          return (\n            <div key={index} style={{ backgroundColor: \"#F8F8FF\", marginTop: \"16px\", padding: \"8px\" }}>\n              <div><span role=\"img\" aria-label=\"home-address\">🏠</span> Address: {wave.address}</div>\n              <div><span role=\"img\" aria-label=\"time\">🕒</span> Time: {wave.timestamp.toString()}</div>\n              <div><span role=\"img\" aria-label=\"message\">📨</span> Message: {wave.message}</div>\n            </div>)\n        })}\n      </div>\n    </div>\n  );\n  }\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}